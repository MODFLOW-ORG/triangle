name: triangle compiler checks
on:
  # run at 6 AM UTC every day
  schedule:
    - cron: '0 6 * * *' 
  push:
  pull_request:
    branches:
      - main
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  PIXI_BETA_WARNING_OFF: true
  DIST: dist-triangle
jobs:
  build:
    name: Build and Test on ${{ matrix.os }} with ${{ matrix.compiler }} ${{ matrix.version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # test latest gcc
          - {os: ubuntu-latest, compiler: gcc, version: 13, shell: bash, release: no}
          - {os: macos-14, compiler: gcc, version: 13, shell: bash, release: yes}
          - {os: windows-latest, compiler: gcc, version: 13, shell: pwsh, release: no}
          # test intel-classic
          - {os: ubuntu-22.04, compiler: intel-classic, version: 2021.7, shell: bash, release: no}
          - {os: macos-13, compiler: intel-classic, version: 2021.7, shell: bash, release: yes}
          # test previous gcc
          - {os: ubuntu-latest, compiler: gcc, version: 12, shell: bash, release: no}
          - {os: ubuntu-latest, compiler: gcc, version: 11, shell: bash, release: no}
          # test ifx
          - {os: ubuntu-22.04, compiler: intel, version: "2025.0", shell: bash, release: yes}
          - {os: windows-2022, compiler: intel, version: "2025.0", shell: pwsh, release: yes}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
      - name: Checkout triangle
        uses: actions/checkout@v5
        with:
          path: triangle

      - uses: maxim-lobanov/setup-xcode@v1
        if: ${{ (runner.os == 'macOS') && (matrix.compiler == 'intel-classic') }}
        with:
          xcode-version: "14.3.1"

      - name: Setup ${{ matrix.compiler }} ${{ matrix.version }} on ${{ matrix.os }}
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: ${{ matrix.compiler}}
          version: ${{ matrix.version }}
          
      - name: Setup pixi
        uses: prefix-dev/setup-pixi@v0.8.14
        with:
          pixi-version: v0.41.4
          manifest-path: "triangle/pixi.toml"

      - name: Set ostag
        shell: bash
        working-directory: triangle
        id: ostag
        run: |
          echo "ostag=$(pixi run get-ostag)" >> $GITHUB_ENV

      - name: Build triangle
        working-directory: triangle
        run: |
          pixi run setup
          pixi run build

      - name: Show build log
        if: failure()
        working-directory: triangle
        run: cat builddir/meson-logs/meson-log.txt
      
      - name: Upload build log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: meson-log.txt
          path: triangle/builddir/meson-logs/meson-log.txt
    
      - name: Unit test triangle
        if: success()
        working-directory: triangle
        run: |
          pixi run test
      
      - name: Show test log
        if: failure()
        working-directory: triangle
        run: cat builddir/meson-logs/testlog.txt

      - name: Create zip file on MacOS and Linux
        if: ${{ matrix.release == 'yes' && runner.os != 'Windows' }}
        working-directory: triangle
        run: |
          zip -r -j ${ostag}.zip bin/
          ls -lha *.zip

      - name: Create zip file on Windows
        if: ${{ matrix.release == 'yes' && runner.os == 'Windows' }}
        working-directory: triangle
        run: |
          $ZipFileName = "$env:ostag.zip"
          Compress-Archive -Path "bin\*" -DestinationPath $ZipFileName
          ls *.zip

      - name: Upload distribution archive
        if: matrix.release == 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DIST }}-${{ matrix.os }}
          path: triangle/*.zip

  release:
    name: Make release
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Download distribution
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.DIST }}*
          merge-multiple: true
          path: ${{ env.DIST }} 

      - name: List distribution files
        run: ls -l ${{ env.DIST }} 

        # create new release if manual trigger
      - name: Create release
        if: github.event_name == 'workflow_dispatch'
        uses: ncipollo/release-action@v1
        with:
          tag: latest_build
          name: "triangle executables"
          artifacts: "${{ env.DIST }}/*"
          draft: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}